# Define workflow rules to control when the pipeline runs
workflow:
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'  # Trigger pipeline for pushes to main
      when: always
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "main"'  # Trigger for MRs targeting main
      when: always
    - when: never  # Prevent pipeline from running for other events

# Define global variables available to all jobs
variables:
  PYTHON_VERSION: "3.9"  # Sets the Python version to 3.9 for consistency across jobs
  DOCKER_REGISTRY: "registry.gitlab.com/$CI_PROJECT_PATH"  # Defines the Docker registry URL using GitLab's predefined variable for the project path
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"  # Specifies the directory to cache pip dependencies
  TEST_IMAGE: "$CI_REGISTRY_IMAGE:test-$CI_COMMIT_REF_SLUG"  # Defines a dynamic Docker image name with the branch or tag slug

# Define the stages of the pipeline, executed in order
stages:
  - scan
  - security
  - lint  # Stage for code quality checks (e.g., linting)
  - test  # Stage for running unit and integration tests
  - build  # Stage for building Docker images
  - scan  # Stage for security and dependency scanning
  - deploy  # Stage for deploying to environments (staging/production)
  - review  # Stage for creating dynamic review apps for merge requests
  - cleanup  # Stage for cleaning up resources (e.g., old Docker images)

# Cache pip dependencies to speed up jobs by reusing them
cache:
  key: "${CI_COMMIT_REF_SLUG}-pip-cache"  # Unique cache key based on the branch or tag slug
  paths:
    - $PIP_CACHE_DIR  # Cache the pip directory defined in variables

# Set the default Docker image for jobs unless overridden
image: python:$PYTHON_VERSION  # Uses the Python image with the version specified in variables

# Define services (e.g., databases) available to jobs
services:
  - name: postgres:13  # Runs a PostgreSQL 13 container for testing
    alias: db  # Alias for the Postgres service to reference in tests
  - redis:6  # Runs a Redis 6 container for testing

# Commands to run before the script section of each job
before_script:
  - python --version  # Prints the Python version for debugging
  - pip install --upgrade pip  # Upgrades pip to the latest version
  - pip install -r requirements.txt --cache-dir $PIP_CACHE_DIR  # Installs project dependencies from requirements.txt, using the cache

sast_job:
  stage: scan
  script:
    - pip install bandit
    - bandit -r . -f json -o sast-report.json
  artifacts:
    reports:
      sast: sast-report.json

codeql-analysis:
  stage: security
  image: ubuntu:22.04  # Base image for installing dependencies
  variables:
    CODEQL_VERSION: "v2.18.2"  # Specify a CodeQL CLI version
    CODEQL_HOME: "/codeql"
  before_script:
    - apt-get update && apt-get install -y wget unzip python3 python3-pip git
    - wget https://github.com/github/codeql-cli-binaries/releases/download/$CODEQL_VERSION/codeql-linux64.zip
    - unzip codeql-linux64.zip -d $CODEQL_HOME
    - export PATH=$CODEQL_HOME/codeql:$PATH
    - git clone --depth 1 https://github.com/github/codeql.git /codeql-queries
  script:
    - $CODEQL_HOME/codeql/codeql database create codeql-db --language=python --source-root=.
    - $CODEQL_HOME/codeql/codeql database analyze codeql-db \
      --format=sarif-latest \
      --output=codeql-results.sarif \
      /codeql-queries/python/ql/src/Security
    - cat codeql-results.sarif
  artifacts:
    paths:
      - codeql-results.sarif
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_MERGE_REQUEST_IID'  # Run on main or MRs

# Job to enforce code quality through linting
lint_job:
  stage: lint  # Assigns this job to the lint stage
  script:
    - pip install flake8 black isort  # Installs linting tools: flake8 (style checker), black (formatter), isort (import sorter)
    - flake8 . --max-line-length=88 --extend-ignore=E203  # Runs flake8 to check code style with a max line length of 88
    - black --check .  # Checks if code is formatted correctly with black
    - isort --check-only --diff .  # Checks if imports are sorted correctly with isort
  rules:
    - if: '$CI_COMMIT_BRANCH || $CI_MERGE_REQUEST_ID'  # Runs this job on any branch or merge request
  tags:
    - docker  # Specifies that this job runs on runners with the "docker" tag

# Job to run unit and integration tests
test_job:
  stage: test  # Assigns this job to the test stage
  script:
    - pip install pytest pytest-cov  # Installs pytest and pytest-cov for testing and coverage
    - pytest --cov=./ --cov-report=xml --junitxml=report.xml  # Runs tests, generates coverage in XML, and test report in JUnit format
  artifacts:
    when: always  # Stores artifacts even if the job fails
    paths:
      - coverage.xml  # Stores the coverage report file
      - report.xml  # Stores the test report file
    reports:
      junit: report.xml  # Integrates test report with GitLab’s test reporting
      cobertura: coverage.xml  # Integrates coverage report with GitLab’s coverage visualization
  parallel: 3  # Splits the test suite into 3 parallel instances to speed up execution
  coverage: '/Total.*?(\d+\.\d+%)/'  # Regex to extract coverage percentage for GitLab UI
  rules:
    - if: '$CI_COMMIT_BRANCH || $CI_MERGE_REQUEST_ID'  # Runs on any branch or merge request
  dependencies: []  # Explicitly specifies no artifact dependencies from previous jobs
  retry:
    max: 2  # Retries the job up to 2 times if it fails
    when:
      - runner_system_failure  # Retry on runner system errors
      - stuck_or_timeout_failure  # Retry on timeouts or stuck jobs

# Job to build and push a Docker image
build_docker_job:
  stage: build  # Assigns this job to the build stage
  image: docker:20.10  # Uses Docker 20.10 image for building Docker images
  services:
    - docker:dind  # Runs Docker-in-Docker service to enable Docker commands
  variables:
    DOCKER_TLS_CERTDIR: ""  # Disables TLS for Docker-in-Docker for simplicity
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY  # Logs into GitLab’s Docker registry
  script:
    - docker build -t $TEST_IMAGE .  # Builds a Docker image with the tag defined in variables
    - docker push $TEST_IMAGE  # Pushes the image to the GitLab registry
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_MERGE_REQUEST_ID'  # Runs on main branch or merge requests
  tags:
    - docker  # Runs on runners with the "docker" tag

# Job for Static Application Security Testing (SAST)
sast_job:
  stage: scan  # Assigns this job to the scan stage
  image: python:$PYTHON_VERSION  # Uses the Python image
  script:
    - pip install bandit  # Installs bandit, a Python security linter
    - bandit -r . -f json -o sast-report.json  # Runs bandit to scan for vulnerabilities, outputs JSON report
  artifacts:
    reports:
      sast: sast-report.json  # Integrates SAST report with GitLab’s security dashboard
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_MERGE_REQUEST_ID'  # Runs on main branch or merge requests

# Job for dependency vulnerability scanning
dependency_scanning:
  stage: scan  # Assigns this job to the scan stage
  image: python:$PYTHON_VERSION  # Uses the Python image
  script:
    - pip install safety  # Installs safety, a dependency vulnerability scanner
    - safety check -r requirements.txt --json > dependency-report.json  # Scans dependencies for vulnerabilities, outputs JSON
  artifacts:
    reports:
      dependency_scanning: dependency-report.json  # Integrates report with GitLab’s security dashboard
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" || $CI_MERGE_REQUEST_ID'  # Runs on main branch or merge requests

# Job to deploy to staging environment
deploy_staging:
  stage: deploy  # Assigns this job to the deploy stage
  image: docker:20.10  # Uses Docker image for deployment commands
  services:
    - docker:dind  # Runs Docker-in-Docker for Docker commands
  environment:
    name: staging  # Defines the staging environment in GitLab
    url: https://staging.example.com  # URL for accessing the deployed app
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY  # Logs into GitLab’s Docker registry
  script:
    - docker pull $TEST_IMAGE  # Pulls the built Docker image
    - docker tag $TEST_IMAGE $DOCKER_REGISTRY:staging  # Tags the image for staging
    - docker push $DOCKER_REGISTRY:staging  # Pushes the tagged image to the registry
    - echo "Deploying to staging..."  # Prints a message for logging
    - ssh user@staging.example.com "docker-compose pull && docker-compose up -d"  # Deploys to staging server using Docker Compose
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'  # Runs only on the main branch
      when: manual  # Requires manual trigger in GitLab UI
  tags:
    - docker  # Runs on runners with the "docker" tag

# Job to deploy to production environment
deploy_production:
  stage: deploy  # Assigns this job to the deploy stage
  image: docker:20.10  # Uses Docker image for deployment
  services:
    - docker:dind  # Runs Docker-in-Docker for Docker commands
  environment:
    name: production  # Defines the production environment in GitLab
    url: https://prod.example.com  # URL for accessing the deployed app
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY  # Logs into GitLab’s Docker registry
  script:
    - docker pull $TEST_IMAGE  # Pulls the built Docker image
    - docker tag $TEST_IMAGE $DOCKER_REGISTRY:production  # Tags the image for production
    - docker push $DOCKER_REGISTRY:production  # Pushes the tagged image to the registry
    - echo "Deploying to production..."  # Prints a message for logging
    - ssh user@prod.example.com "docker-compose pull && docker-compose up -d"  # Deploys to production server using Docker Compose
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'  # Runs only on the main branch
      when: manual  # Requires manual trigger in GitLab UI
      allow_failure: false  # Job must succeed; failure stops the pipeline
  needs:
    - deploy_staging  # Requires successful completion of deploy_staging job
  approvals:
    required: 2  # Requires 2 approvals in GitLab UI before running
  tags:
    - docker  # Runs on runners with the "docker" tag

# Job to create dynamic review apps for merge requests
review_app:
  stage: review  # Assigns this job to the review stage
  environment:
    name: review/$CI_COMMIT_REF_SLUG  # Creates a dynamic environment name based on branch/tag
    url: https://$CI_COMMIT_REF_SLUG.review.example.com  # URL for the review app
    on_stop: stop_review_app  # Specifies the job to run when stopping the environment
  script:
    - echo "Deploying review app for $CI_COMMIT_REF_SLUG..."  # Prints a message for logging
    - ssh user@review.example.com "docker run -d -p 80:80 $TEST_IMAGE"  # Deploys the Docker image as a review app
  rules:
    - if: '$CI_MERGE_REQUEST_ID'  # Runs only for merge requests
      when: always  # Always runs when the rule is met
  tags:
    - docker  # Runs on runners with the "docker" tag

# Job to stop review apps
stop_review_app:
  stage: cleanup  # Assigns this job to the cleanup stage
  environment:
    name: review/$CI_COMMIT_REF_SLUG  # Matches the review app environment
    action: stop  # Marks this job as stopping the environment
  script:
    - echo "Stopping review app for $CI_COMMIT_REF_SLUG..."  # Prints a message for logging
    - ssh user@review.example.com "docker stop $(docker ps -q --filter ancestor=$TEST_IMAGE)"  # Stops the Docker container for the review app
  rules:
    - if: '$CI_MERGE_REQUEST_ID'  # Runs only for merge requests
      when: manual  # Requires manual trigger to stop the review app
  tags:
    - docker  # Runs on runners with the "docker" tag

# Job to clean up old Docker images
cleanup_job:
  stage: cleanup  # Assigns this job to the cleanup stage
  image: docker:20.10  # Uses Docker image for cleanup commands
  services:
    - docker:dind  # Runs Docker-in-Docker for Docker commands
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY  # Logs into GitLab’s Docker registry
  script:
    - docker system prune -f  # Removes unused Docker objects
    - docker rmi $(docker images -q $CI_REGISTRY_IMAGE | uniq) || true  # Removes project images, ignores errors if none exist
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'  # Runs only on the main branch
      when: manual  # Requires manual trigger in GitLab UI
  tags:
    - docker  # Runs on runners with the "docker" tag
