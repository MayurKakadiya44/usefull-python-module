# Name of the GitHub Actions workflow
name: Parallel Python CI/CD Pipeline

# Define events that trigger the workflow
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Environment variables for all jobs
env:
  PYTHON_VERSION: '3.11' # Default Python version
  REGISTRY: ghcr.io # GitHub Container Registry

# Permissions for the workflow
permissions:
  contents: read # Allow reading repository contents
  packages: write # Allow writing to GitHub Packages

# Define jobs
jobs:
  # Job for linting (runs on GitHub-hosted runner)
  lint:
    name: Lint Codebase
    runs-on: ubuntu-latest # GitHub-hosted runner
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: Check formatting with Black
        run: black --check .

      - name: Check imports with isort
        run: isort --check-only --diff .

      - name: Run flake8
        run: flake8 . --max-line-length=88 --extend-ignore=E203

  # Job for unit tests across multiple Python versions (parallel via matrix)
  unit-tests:
    name: Unit Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest # GitHub-hosted runner
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11'] # Parallel execution across versions
      fail-fast: false # Continue even if one matrix job fails
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run unit tests
        run: pytest tests/unit/ --cov=./ --cov-report=xml

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage-${{ matrix.python-version }}
          path: coverage.xml

  # Job for integration tests (runs on self-hosted runner)
  integration-tests:
    name: Integration Tests
    runs-on: self-hosted # Self-hosted runner for custom environment (e.g., with GPU)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Start test database
        run: docker run -d -p 5432:5432 postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: testdb

      - name: Run integration tests
        run: pytest tests/integration/ --cov=./ --cov-report=xml
        env:
          DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: integration-coverage
          path: coverage.xml

  # Job for building and deploying (dependent on other jobs)
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest # GitHub-hosted runner
    needs: [lint, unit-tests, integration-tests] # Wait for parallel jobs to complete
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ github.repository }}:latest

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Replace with your deployment commands
