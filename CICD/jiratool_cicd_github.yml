name: Python CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  code-scanning:
    name: CodeQL Code Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'python'
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  build-and-test:
    name: Build, Unit Test and Integration Test
    runs-on: ubuntu-latest
    needs: code-scanning
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'  # Adjust as per your Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 .

      - name: Run Unit Tests
        run: |
          pip install pytest
          pytest tests/unit --junitxml=unit-test-results.xml

      - name: Run Integration Tests
        run: |
          pip install pytest
          pytest tests/integration --junitxml=integration-test-results.xml

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: |
            unit-test-results.xml
            integration-test-results.xml

  package:
    name: Package Application
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build Executable with PyInstaller
        run: |
          pyinstaller --onefile your_main_script.py
          # The executable will be in dist/your_main_script(.exe on Windows runners)

      - name: Upload Executable Artifact
        uses: actions/upload-artifact@v3
        with:
          name: jira-automation-tool-executable
          path: dist/

  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: package
    steps:
      - name: Download Executable Artifact
        uses: actions/download-artifact@v3
        with:
          name: jira-automation-tool-executable
          path: ./deploy

      - name: Deploy to Server (Example)
        env:
          DEPLOY_SERVER: ${{ secrets.DEPLOY_SERVER }}
          DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          echo "$SSH_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          scp -i private_key.pem ./deploy/* $DEPLOY_USER@$DEPLOY_SERVER:$DEPLOY_PATH
          ssh -i private_key.pem $DEPLOY_USER@$DEPLOY_SERVER "chmod +x $DEPLOY_PATH/your_main_script"
