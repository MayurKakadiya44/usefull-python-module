# Define stages for sequential execution
stages:
 - lint # Parallel linting jobs
 - test # Parallel testing jobs
 - build # Sequential build job
 - deploy # Sequential deployment jobs

# Cache pip dependencies
cache:
 key: "${CI_COMMIT_REF_SLUG}-pip-cache"
 paths:
 - .cache/pip

# Default image for Python jobs
image: python:3.9

# Variables for cloud configurations
variables:
 AWS_REGION: "us-east-1"
 GCP_PROJECT: "<your-gcp-project>"
 AZURE_RESOURCE_GROUP: "<your-resource-group>"
 AZURE_CLUSTER_NAME: "my-aks"
 KUBE_EKS_CONTEXT: "<group/project>:eks-agent"
 KUBE_GKE_CONTEXT: "<group/project>:gke-agent"
 KUBE_AKS_CONTEXT: "<group/project>:aks-agent"

# Linting job (parallel)
lint_flake8:
 stage: lint
 script:
 - pip install flake8
 - flake8 . --max-line-length=88
 tags:
 - k8s
 - docker
 rules:
 - if: '$CI_COMMIT_BRANCH || $CI_MERGE_REQUEST_ID'

# Testing job (parallel with instances)
unit_test:
 stage: test
 script:
 - pip install pytest pytest-cov
 - pytest tests/unit --cov=./ --cov-report=xml
 artifacts:
 paths:
 - coverage.xml
 reports:
 cobertura: coverage.xml
 parallel: 3 # Split into 3 parallel instances
 tags:
 - k8s
 - docker
 rules:
 - if: '$CI_COMMIT_BRANCH || $CI_MERGE_REQUEST_ID'

# Build job (sequential)
build_docker_job:
 stage: build
 image: docker:20.10
 services:
 - docker:dind
 before_script:
 - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
 script:
 - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG .
 - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
 tags:
 - k8s
 - docker
 rules:
 - if: '$CI_COMMIT_BRANCH == "main"'
 needs:
 - lint_flake8
 - unit_test

# Deploy to AWS EKS (sequential)
deploy_eks:
 stage: deploy
 image: bitnami/kubectl:latest
 before_script:
 - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
 - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
 - aws configure set region $AWS_REGION
 - aws eks update-kubeconfig --name my-eks --region $AWS_REGION
 script:
 - kubectl apply -f deployment.yml
 - kubectl rollout status deployment/python-app
 tags:
 - k8s
 - docker
 rules:
 - if: '$CI_COMMIT_BRANCH == "main"'
 when: manual
 needs:
 - build_docker_job
 environment:
 name: eks-production
 url: https://<your-eks-domain>

# Deploy to GCP GKE (sequential)
deploy_gke:
 stage: deploy
 image: google/cloud-sdk:latest
 before_script:
 - echo $GCP_SERVICE_ACCOUNT_KEY > gcp-key.json
 - gcloud auth activate-service-account --key-file gcp-key.json
 - gcloud container clusters get-credentials my-gke --project $GCP_PROJECT
 script:
 - kubectl apply -f deployment.yml
 - kubectl rollout status deployment/python-app
 tags:
 - k8s
 - docker
 rules:
 - if: '$CI_COMMIT_BRANCH == "main"'
 when: manual
 needs:
 - build_docker_job
 environment:
 name: gke-production
 url: https://<your-gke-domain>

# Deploy to Azure AKS (sequential)
deploy_aks:
 stage: deploy
 image: mcr.microsoft.com/azure-cli:latest
 before_script:
 - az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID
 - az aks get-credentials --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_CLUSTER_NAME
 script:
 - kubectl apply -f deployment.yml
 - kubectl rollout status deployment/python-app
 tags:
 - k8s
 - docker
 rules:
 - if: '$CI_COMMIT_BRANCH == "main"'
 when: manual
 needs:
 - build_docker_job
 environment:
 name: aks-production
 url: https://<your-aks-domain>
